package ${PACKAGE_NAME}

import io.kvision.Application
import io.kvision.CoreModule
#foreach( ${initializer} in ${selected_initializers} )
import io.kvision.${initializer}
#end
import io.kvision.html.Span
#if ( ${i18n_included} )
import io.kvision.i18n.DefaultI18nManager
import io.kvision.i18n.I18n
#end
import io.kvision.module
import io.kvision.panel.root
#if ( ${i18n_included} )
import io.kvision.require
#end
import io.kvision.startApplication
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.launch

val AppScope = CoroutineScope(Dispatchers.Default + SupervisorJob())

class App : Application() {

    override fun start(state: Map<String, Any>) {
#if ( ${i18n_included} )
        I18n.manager =
            DefaultI18nManager(
                mapOf(
                    "en" to require("i18n/messages-en.json"),
                    "pl" to require("i18n/messages-pl.json")
                )
            )

#end
        val root = root("kvapp") {
        }
        AppScope.launch {
            val pingResult = Model.ping("Hello world from client!")
            root.add(Span(pingResult))
        }
    }
}

fun main() {
    startApplication(
        ::App,
        module.hot,
#foreach( ${initializer} in ${selected_initializers} )
        ${initializer},
#end
        CoreModule
    )
}
